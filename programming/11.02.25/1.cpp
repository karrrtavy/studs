#include <iostream>
#include <vector>

using namespace std;

//1 пример
int x = 0;

void f(int a, int b, int _x) {  //update: функция зависит не от глобальной переменной, а от локальной
    if (_x){
        // ...
    }
    else{
        // ...
    }
}
//1 пример

//пример ненужной сложности
void drawRect(auto x1 , auto y1, auto x2, auto y2);

class Object;
class Figure: public Object;
class Rectangle: public Figure {
public:
    Rectangle (int x1, int y1, int x2, int y2) {}
    virtual void draw(){}
};

//пример лодочного якоря
void f_old() {

}

class Figure;
//class square: public Figure;
class circle: public Figure;
class rect: public Figure;

void f() {
    // ...
    // ... 
    // ...
}

// Антипаттерн - бесполезные классы
class MyVector {
    vector<int> v;
public:
    void add(int x){v.push_back(x);}
    void remove(int index){v.erase(v.begin());}
};


int main() {
    
    /*
        спаггети-код - сложный для понимания, слабо структурированный код
        причина: много связей, неявных зависимостей
        как сделать код сложным для понимания:
    */
    // 1. скрытые зависимости;
    f(1, 2, x);
    // ...
    f(1, 2, x);
    
    // 2. злоупотребление оператора friend;
    // 3. вложенные контсрукции (пример: вложенные циклы);
    // 4. использование goto;
    

    // Антипаттерн - золотой молоток

    // Антипаттерн - магические числа - использование числовых констант в коде
    int a = x * 8;

    int b = /* c */ + 8;


    float f = 34.593f;

    float x = a * 34.6f;


    //update: использовать именование константы
    const int NUM_ELEMENTS = 8;
    const int NUM_BITS = 8;
    const int ARRAY_SIZE = 10;
    const float FVALUE = 34.59f;
    //или использовать
    const int NUM_BITS_INT = sizeof(int) * 8;

    sizeof(1);
    sizeof(int);
    
    // Антипаттерн - hard code (жОсткое кодирование)
    /* 
        имя файла
        имя бд и таблиц
        имя девайса
        сетевой адрес
        логин, пароль
        идентификатор


        имя1 = значение1
        имя2 = значение2
        имя3 = значение3
        имя4 = значение4


        HINSTANCE hinstLib = LoadLibrary("X.dll");
         |
        \ /
         |
        void* handle = dlopen("X.so", RTLD_LAZY);
    */

    // Антипаттерн - ненужная сложность (неоправданно универсальное решение)
    drawRect(0, 0, 5, 7);

    // Антипаттерн - лодочный якорь (сохранение кода в неиспользуемых частей системы)
    
    // Антипаттерн - перекрученное колесо (разработка собственного решения там, где есть готовое)

    // Антипаттерн - поток лавы (устаревший код, не поддающийся пониманию), необходимо документировать код, чтобы избежать подобного паттерна

    // Антипаттерн - code review (осмотр программы на наличие замечаний)

    // Антипаттерн - parse programming (хз), необходимо просто разобраться в коде/алгоритме
    
    // Антипаттерн - слепая дева (недостаточная проверка входных данных), необходимо сообщить об ошибке

    // Антипаттерн - звездочное комментирование (комментирование любого действия)

    // Антипаттерн - бесполезные классы
    
    // Антипаттерн - божественный объект (некоторый объект, у которого много данных и методов, остальные классы могут обращаться к методам БО)

    return 0;
}